@using Our.Umbraco.Ditto
@using Our.Umbraco.PropertyConverters.Utilities
@using TestSite.Logic.Models
@using Umbraco.Web.Models
@inherits UmbracoTemplatePage
@{
    Layout = "umbLayout.cshtml";
}
@{ Html.RenderPartial("umbHomepageBanner"); }
<!-- Main -->
<div id="main-wrapper">
    <div id="main" class="container">
        <div class="row">
            <div class="12u">
                <h2>Content picker</h2>
                @{
                    var typedContentPicker = Model.Content.GetPropertyValue<IPublishedContent>("contentPicker");
                    if (typedContentPicker != null)
                    {
                        <p>@typedContentPicker.GetType()</p>
                        <p>@typedContentPicker.Name</p>
                    }
                }
                <h2>Media picker</h2>
                @{
                    var typedMediaPicker = Model.Content.GetPropertyValue<IPublishedContent>("mainImage");
                    if (typedMediaPicker != null)
                    {
                        <p>@typedMediaPicker.GetType()</p>
                        <p>@typedMediaPicker.Url</p>
                    }
                }

                <h2>Multi node tree picker content</h2>
                @{
                    var typedMultiNodeTreePicker = Model.Content.GetPropertyValue<IEnumerable<IPublishedContent>>("featuredNews");

                    <p>@typedMultiNodeTreePicker.GetType()</p>

                    foreach (var item in typedMultiNodeTreePicker)
                    {
                        <p>@item.Name</p>
                    }
                }

                <h2>Multi node tree picker media</h2>
                @{
                    var typedMultiNodeTreePickerMedia = Model.Content.GetPropertyValue<IEnumerable<IPublishedContent>>("featuredMedia");

                    <p>@typedMultiNodeTreePickerMedia.GetType()</p>

                    foreach (var item in typedMultiNodeTreePickerMedia)
                    {
                        <p>@item.Name</p>
                    }
                }

                <h2>Multi node tree picker members</h2>
                @{
                    var typedMultiNodeTreePickerMembers = Model.Content.GetPropertyValue<IEnumerable<IPublishedContent>>("featuredMember");

                    <p>@typedMultiNodeTreePickerMembers.GetType()</p>

                    foreach (var item in typedMultiNodeTreePickerMembers)
                    {
                        <p>@item.GetType()</p>
                        <p>@item.Name</p>
                        <p>@(item.GetPropertyValue<string>("myProperty"))</p>
                    }
                }

                <h2>Multiple Media Picker set to multiple</h2>
                @{
                    var typedMultiMediaPicker = Model.Content.GetPropertyValue<IEnumerable<IPublishedContent>>("multiMedia");
                    foreach (var item in typedMultiMediaPicker)
                    {
                        var imgSrc = Umbraco.TypedImage(item).GetCropUrl("Thumb");
                        <img src="@imgSrc" style="width:200px" />

                        var cropper = item.GetPropertyValue<ImageCropDataSet>("umbracoFile");
                        <img src="@cropper.Src" style="width:200px" />
                        @item.Name @item.GetType()
                    }
                }

                <h2>Multiple Media Picker set to single</h2>
                @{
                    var typedMediaPickerSingle = Model.Content.GetPropertyValue<IPublishedContent>("multiMediaSingle");
                    if (typedMediaPickerSingle != null)
                    {
                        <img src="@typedMediaPickerSingle.Url" style="width:200px" />
                        @typedMediaPickerSingle.GetType()
                    }
                }

                <h2>Related Links Ditto</h2>
                @{
                    var model = Model.Content.As<Home>();
                    var relatedLinks = model.RelatedLinks;
                    if (relatedLinks!= null && relatedLinks.Any())
                    {
                        <ul>
                            @foreach (var item in relatedLinks)
                            {
                                var linkTarget = (item.NewWindow) ? "_blank" : null;
                                <li><a href="@item.Link" target="@linkTarget">@item.Caption</a></li>
                            }
                        </ul>
                    }
                }

                <h2>Related Links</h2>
                @{
                    var typedRelatedLinksConverted = Model.Content.GetPropertyValue<RelatedLinks>("relatedLinks");

                    if (typedRelatedLinksConverted != null && typedRelatedLinksConverted.Any())
                    {
                        <ul>
                            @foreach (var item in typedRelatedLinksConverted)
                            {
                                var linkTarget = (item.NewWindow) ? "_blank" : null;
                                <li><a href="@item.Link" target="@linkTarget">@item.Caption</a></li>
                            }
                        </ul>
                    }
                }

                @{ Html.RenderPartial("umbFeatures"); }
            </div>
        </div>
        <div class="row">
            <div class="12u">
                @{   Html.RenderPartial("umbNewsOverviewWidget"); }
            </div>
        </div>
    </div>
</div>
<!-- /Main -->
