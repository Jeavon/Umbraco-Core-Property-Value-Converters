@using Our.Umbraco.PropertyConverters.Models
@inherits UmbracoTemplatePage
@{
    Layout = "umbLayout.cshtml";
}
@{ Html.RenderPartial("umbHomepageBanner"); }
<!-- Main -->
<div id="main-wrapper">
    <div id="main" class="container">
        <div class="row">
            <div class="12u">
                @{
                    var typedContentPicker = Model.Content.GetPropertyValue<IPublishedContent>("contentPicker");
                    if (typedContentPicker != null)
                    {
                        <p>@typedContentPicker.Name</p>
                    }
                }
                @{
                    var typedMediaPicker = Model.Content.GetPropertyValue<IPublishedContent>("mainImage");
                    if (typedMediaPicker != null)
                    {
                        <p>@typedMediaPicker.Url</p>
                    }
                }
                
                <h2>Multi ndoe tree picker</h2>
                @{
                    var typedMultiNodeTreePicker = Model.Content.GetPropertyValue<IEnumerable<IPublishedContent>>("featuredNews");
                    foreach (var item in typedMultiNodeTreePicker)
                    {
                        <p>@item.Name</p>
                    }
                }
                
                <h2>Dynamic Multi ndoe tree picker</h2>
                @{
                    var dynamicMultiNodeTreePicker = CurrentPage.featuredNews;
                    foreach (var item in dynamicMultiNodeTreePicker)
                    {
                        <p>@item.Name</p>
                    }
                }
                

                <h2>Multiple Media Picker set to multiple</h2>
                @{
                    var typedMultiMediaPicker = Model.Content.GetPropertyValue<IEnumerable<IPublishedContent>>("multiMedia");
                    foreach (var item in typedMultiMediaPicker)
                    {
                        <img src="@item.Url" style="width:200px"/>
                        @item.Name
                    }
                }
                
                <h2>Dynamic Multiple Media Picker set to multiple</h2>
                @{
                    var dynamicMultiMediaPicker = CurrentPage.multiMedia;
                    foreach (var item in dynamicMultiMediaPicker)
                    {
                        <img src="@item.Url" style="width:200px"/>
                        @item.Name
                    }
                }                

                <h2>Multiple Media Picker set to single</h2>
                @{
                    var typedMediaPickerSingle = Model.Content.GetPropertyValue<IPublishedContent>("multiMediaSingle");
                    if (typedMediaPickerSingle != null)
                    {
                        <img src="@typedMediaPickerSingle.Url" style="width:200px"/>
                    }
                }               

                <h2>Dynamic Multiple Media Picker set to single</h2>
                @{
                    var dynamicMediaPickerSingle = CurrentPage.multiMediaSingle;
                    if (dynamicMediaPickerSingle != null)
                    {
                        <img src="@dynamicMediaPickerSingle.Url" style="width:200px" />
                    }
                }                          

                <h2>Related Links</h2>
                @{
                    var typedRelatedLinksConverted = Model.Content.GetPropertyValue<RelatedLinks>("relatedLinks");

                    if (typedRelatedLinksConverted.Any())
                    {
                        <ul>
                            @foreach (var item in typedRelatedLinksConverted)
                            {
                                var linkTarget = (item.NewWindow) ? "_blank" : null;
                                <li><a href="@item.Link" target="@linkTarget">@item.Caption</a></li>
                            }
                        </ul>
                    }
                }        
                
                <h2>Dynamic Related Links</h2>
                @{
                    var dynamicRelatedLinks = CurrentPage.relatedLinks;

                    if (dynamicRelatedLinks.Any())
                    {
                        <ul>
                            @foreach (var item in dynamicRelatedLinks)
                            {
                                var linkTarget = (item.NewWindow) ? "_blank" : null;
                                <li><a href="@item.Link" target="@linkTarget">@item.Caption</a></li>
                            }
                        </ul>
                    }
                }                                  

                @{ Html.RenderPartial("umbFeatures"); }
            </div>
        </div>
        <div class="row">
            <div class="12u">
                @{   Html.RenderPartial("umbNewsOverviewWidget"); }
            </div>
        </div>
    </div>
</div>
<!-- /Main -->
